#!/usr/bin/env python
# -*- coding: utf-8 -*-


#--------------------------------------------------
#iARM通信用Windowsクライアントに制御命令を送るROSノード
#
#author: Yutaro ISHIDA
#date: 16/03/03
#--------------------------------------------------


import rospy

import tf

from std_msgs.msg import String

import socket

import os
import sys

from subprocess import *


#--------------------------------------------------
#定数
#--------------------------------------------------
#Windwosクライアントとソケット通信するための設定
ROS_SERVER_IPADDR = '192.168.0.100' #ROSノードPCのIPアドレス
ROS_SERVER_PORT = 60123 #ROSノードとWindowsクライアントで同じポート番号にする


ros_server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ros_server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
ros_server_sock.bind((ROS_SERVER_IPADDR, ROS_SERVER_PORT))
ros_server_sock.listen(1)
print '[INFO]: Connect to Windows client'
client_sock, client_address = ros_server_sock.accept()
print '[INFO]: Connect to Windows client SUCCESS'


#--------------------------------------------------
#音声合成を現スレッドで起動(喋り終わるまで待つ)
#半角文字は英語、全角文字は日本語で喋る
#例: speech_single('This is English test message.これは日本語のテストメッセージです。')
#--------------------------------------------------
def speech_single(speech_str):
    if rospy.get_param('/param/dbg/speech/ssynlog') == 1:
        rospy.loginfo(speech_str)
    if rospy.get_param('/param/dbg/sm/flow') == 0:
        call(['rosrun', 'common_pkg', 'speech_syn.py', speech_str])


#--------------------------------------------------
#音声合成を現スレッドで起動(喋り終わるまで待つ)
#半角文字は英語、全角文字は日本語で喋る
#例: speech_single('This is English test message.これは日本語のテストメッセージです。')
#--------------------------------------------------
def speech_multi(speech_str):
    if rospy.get_param('/param/dbg/speech/ssynlog') == 1:
        rospy.loginfo(speech_str)
    if rospy.get_param('/param/dbg/sm/flow') == 0:
        Popen(['rosrun', 'common_pkg', 'speech_syn.py', speech_str])


#--------------------------------------------------
#制御命令Subscribe関数
#--------------------------------------------------
def subf_iarm_command(iarm_command):
    comm_iarm(iarm_command.data)


#--------------------------------------------------
#iARM通信用Windowsクライアントと通信する関数
#--------------------------------------------------
def comm_iarm(iarm_snd_msg):
    client_sock.sendall(iarm_snd_msg)

    #制御が完了するまで待つ
    iarm_rcv_params = ["", ""]
    while iarm_rcv_params[0] != "iARMCtrl" and iarm_rcv_params[1] != "Comp":
        iarm_rcv_msg = client_sock.recv(1024)
        iarm_rcv_params = iarm_rcv_msg.split(',')
        rospy.sleep(0.05)


#--------------------------------------------------
#メイン関数
#--------------------------------------------------
if __name__ == '__main__':
    node_name = os.path.basename(__file__)
    node_name = node_name.split('.')
    rospy.init_node(node_name[0])


    rospy.Subscriber("/iarm/commnad", String, subf_elecom_pad)
    rospy.Subscriber("/cmd_vel", Twist, subf_cmd_vel)

    pub_odom = rospy.Publisher('/odom', Odometry, queue_size = 1)

    main_rate = rospy.Rate(20)    
    while not rospy.is_shutdown():
        comm_exia()

        v = exia_snd_mess['v'].split(":")
        v_params = v[1].split(",")
        p = exia_rcv_mess['p'].split(":")
        p_params = p[1].split(",")

        quaternion = quaternion_from_euler(0.0, 0.0, float(p_params[3]) * DEG2RAD)

        odom = Odometry()

        odom.header.stamp = rospy.get_rostime();
        odom.header.frame_id = "odom";
    
        odom.pose.pose.position.x = (float(p_params[1]) * mm2m) * -1
        odom.pose.pose.position.y = float(p_params[2]) * mm2m
        odom.pose.pose.position.z = 0
        odom.pose.pose.orientation.x = float(quaternion[0])
        odom.pose.pose.orientation.y = float(quaternion[1])
        odom.pose.pose.orientation.z = float(quaternion[2])
        odom.pose.pose.orientation.w = float(quaternion[3])
        odom.twist.twist.linear.x = (float(v_params[1]) * mm2m) * -1
        odom.twist.twist.linear.y = float(v_params[2]) * mm2m
        odom.twist.twist.linear.z = 0
        odom.twist.twist.angular.x = 0
        odom.twist.twist.angular.y = 0
        odom.twist.twist.angular.z = float(v_params[3]) * DEG2RAD

        pub_odom.publish(odom)

        odom2base_link = tf.TransformBroadcaster()
        odom2base_link.sendTransform(((float(p_params[1]) * mm2m) * -1, float(p_params[2]) * mm2m, 0), tf.transformations.quaternion_from_euler(0, 0, float(p_params[3]) * DEG2RAD), rospy.Time.now(), "base_link", "odom")
    
        main_rate.sleep()

    clientsock.close()
